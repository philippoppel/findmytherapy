datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

enum UserRole {
  CLIENT
  THERAPIST
  ADMIN
}

enum TherapistStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ListingPlan {
  FREE
  PRO
  PRO_PLUS
}

enum ListingStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum OrderType {
  LISTING_SUB
  COURSE
}

enum OrderStatus {
  REQUIRES_PAYMENT
  PAID
  REFUNDED
  CANCELED
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum NextStep {
  INFO
  COURSE
  THERAPIST
}

enum MatchStatus {
  NEW
  CONTACTED
  DECLINED
  ACCEPTED
}

enum AlertSeverity {
  HIGH
  CRITICAL
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  emailVerified  DateTime?
  passwordHash   String?
  firstName      String?
  lastName       String?
  marketingOptIn Boolean  @default(false)
  role           UserRole @default(CLIENT)
  twoFASecret    String?
  locale         String   @default("de-AT")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  // Relations
  accounts         Account[]
  sessions         Session[]
  therapistProfile TherapistProfile?
  clientOrders     Order[] @relation("ClientOrders")
  enrollments      Enrollment[]
  triageSessions   TriageSession[]
  clientMatches    Match[] @relation("ClientMatches")
  emergencyAlerts  EmergencyAlert[] @relation("ClientAlerts")
  handledAlerts    EmergencyAlert[] @relation("HandlerAlerts")
  auditLogs        AuditLog[]
  appointments     Appointment[]
  profileVersions  TherapistProfileVersion[] @relation("TherapistProfileVersionAuthor")

  @@index([email])
  @@index([role])
  @@index([deletedAt])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TherapistProfile {
  id               String          @id @default(cuid())
  userId           String          @unique
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  status           TherapistStatus @default(PENDING)
  adminNotes       String?         @db.Text
  licenseAuthority String?
  licenseId        String?
  displayName      String?
  title            String?
  headline         String?
  profileImageUrl  String?
  approachSummary  String?         @db.Text
  experienceSummary String?        @db.Text
  services         String[]        @default([])
  videoUrl         String?
  acceptingClients Boolean         @default(true)
  yearsExperience  Int?
  rating           Float?
  reviewCount      Int?            @default(0)
  responseTime     String?
  modalities       String[]
  specialties      String[]
  priceMin         Int?            // in minor units (cents)
  priceMax         Int?            // in minor units (cents)
  languages        String[]
  online           Boolean         @default(false)
  city             String?
  country          String          @default("AT")
  about            String?         @db.Text
  availabilityNote String?         @db.Text
  pricingNote      String?         @db.Text
  isPublic         Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?

  // Relations
  listings         Listing[]
  courses          Course[]
  payouts          Payout[]
  therapistMatches Match[] @relation("TherapistMatches")
  appointments     Appointment[]
  versions         TherapistProfileVersion[]

  @@index([status, isPublic])
  @@index([city])
  @@index([country])
  @@index([acceptingClients])
  @@index([rating])
  @@index([deletedAt])
}

model TherapistProfileVersion {
  id        String           @id @default(cuid())
  profileId String
  profile   TherapistProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  data      Json
  createdAt DateTime         @default(now())
  authorId  String?
  author    User?            @relation("TherapistProfileVersionAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@index([profileId])
  @@index([authorId])
  @@index([createdAt])
}

model Listing {
  id                 String        @id @default(cuid())
  therapistId        String
  therapist          TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  plan               ListingPlan   @default(FREE)
  status             ListingStatus @default(ACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  stripeCustomerId   String?
  stripeSubId        String?       @unique
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?

  @@index([therapistId])
  @@index([status])
  @@index([stripeSubId])
  @@index([deletedAt])
}

model Course {
  id            String       @id @default(cuid())
  therapistId   String
  therapist     TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  title         String
  slug          String       @unique
  description   String       @db.Text
  price         Int          // in minor units (cents)
  currency      String       @default("EUR")
  status        CourseStatus @default(DRAFT)
  mediaManifest Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  // Relations
  lessons      Lesson[]
  enrollments  Enrollment[]

  @@index([therapistId])
  @@index([slug])
  @@index([status])
  @@index([deletedAt])
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  durationSec Int
  assetRef    String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@unique([courseId, order])
  @@index([courseId])
  @@index([deletedAt])
}

model Order {
  id                    String      @id @default(cuid())
  buyerId               String
  buyer                 User        @relation("ClientOrders", fields: [buyerId], references: [id])
  type                  OrderType
  amount                Int         // in minor units (cents)
  currency              String      @default("EUR")
  status                OrderStatus @default(REQUIRES_PAYMENT)
  stripePaymentIntentId String?     @unique
  stripeCheckoutSessionId String?   @unique
  metadata              Json?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([buyerId])
  @@index([status])
  @@index([stripePaymentIntentId])
  @@index([stripeCheckoutSessionId])
}

model Enrollment {
  id        String   @id @default(cuid())
  clientId  String
  client    User     @relation(fields: [clientId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())

  @@unique([clientId, courseId])
  @@index([clientId])
  @@index([courseId])
}

model Payout {
  id               String       @id @default(cuid())
  therapistId      String
  therapist        TherapistProfile @relation(fields: [therapistId], references: [id])
  amount           Int          // in minor units (cents)
  currency         String       @default("EUR")
  stripeTransferId String?      @unique
  status           PayoutStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([therapistId])
  @@index([status])
  @@index([stripeTransferId])
}

model TriageSession {
  id                 String    @id @default(cuid())
  clientId           String
  client             User      @relation(fields: [clientId], references: [id])

  // PHQ-9 (Patient Health Questionnaire) - 9 items, each 0-3
  phq9Answers        Int[]     // Array of 9 answers (0-3 each)
  phq9Score          Int?      // Total score 0-27
  phq9Severity       String?   // "minimal", "mild", "moderate", "moderately_severe", "severe"

  // GAD-7 (Generalized Anxiety Disorder) - 7 items, each 0-3
  gad7Answers        Int[]     // Array of 7 answers (0-3 each)
  gad7Score          Int?      // Total score 0-21
  gad7Severity       String?   // "minimal", "mild", "moderate", "severe"

  // Additional context questions
  supportPreferences String[]  // therapist, course, group, checkin
  availability       String[]  // online, hybrid, mornings, weekend

  // Risk assessment
  riskLevel          RiskLevel
  recommendedNextStep NextStep

  // Emergency flag for critical scores
  requiresEmergency  Boolean   @default(false)
  emergencyTriggered Boolean   @default(false)

  meta               Json?
  createdAt          DateTime  @default(now())

  // Relations
  emergencyAlerts    EmergencyAlert[] @relation("TriageEmergencyAlerts")

  @@index([clientId])
  @@index([riskLevel])
  @@index([requiresEmergency])
  @@index([createdAt])
}

model TriageSnapshot {
  id                     String   @id @default(cuid())
  score                  Int
  level                  String
  mood                   Int?
  motivation             Int?
  anxiety                Int?
  support                String[]
  availability           String[]
  recommendedTherapists  String[]
  recommendedCourses     String[]
  createdAt              DateTime @default(now())

  @@index([createdAt])
  @@index([level])
}

model Match {
  id          String      @id @default(cuid())
  clientId    String
  client      User        @relation("ClientMatches", fields: [clientId], references: [id])
  therapistId String
  therapist   TherapistProfile @relation("TherapistMatches", fields: [therapistId], references: [id])
  score       Float
  reason      String[]
  status      MatchStatus @default(NEW)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([clientId, therapistId])
  @@index([clientId])
  @@index([therapistId])
  @@index([status])
}

model EmergencyAlert {
  id              String         @id @default(cuid())
  clientId        String
  client          User           @relation("ClientAlerts", fields: [clientId], references: [id])
  triageSessionId String?
  triageSession   TriageSession? @relation("TriageEmergencyAlerts", fields: [triageSessionId], references: [id])
  severity        AlertSeverity
  triggeredAt     DateTime       @default(now())
  handledBy       String?
  handler         User?          @relation("HandlerAlerts", fields: [handledBy], references: [id])
  notes           String?        @db.Text

  @@index([clientId])
  @@index([triageSessionId])
  @@index([severity])
  @@index([handledBy])
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String
  actor    User     @relation(fields: [actorId], references: [id])
  action   String
  entity   String
  entityId String
  ip       String?
  at       DateTime @default(now())

  @@index([actorId])
  @@index([entity, entityId])
  @@index([at])
}

model ContactRequest {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String?
  topic         String
  message       String   @db.Text
  preferredSlot String
  status        String   @default("NEW") // NEW, IN_PROGRESS, RESOLVED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model AccessRequest {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  role      String   // THERAPIST, ORGANISATION, PRIVATE
  company   String?
  notes     String?  @db.Text
  status    String   @default("NEW") // NEW, CONTACTED, SESSION_SCHEDULED, COMPLETED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([createdAt])
}

model PasswordResetRequest {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
  @@index([expires])
}

model Appointment {
  id           String   @id @default(cuid())
  therapistId  String
  therapist    TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  clientId     String?
  client       User?    @relation(fields: [clientId], references: [id], onDelete: SetNull)
  title        String
  description  String?  @db.Text
  startTime    DateTime
  endTime      DateTime
  status       String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, CANCELED, COMPLETED
  location     String?  // "online" or physical address
  meetingLink  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([therapistId])
  @@index([clientId])
  @@index([startTime])
  @@index([status])
}
